<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1485127133282">{:repl-history {:ide [], :local [&quot;(use 'halfling.result)&quot; &quot;(when-success [_ x]\n              (println ))&quot; &quot;(macroexpand '(when-success [_ (task (+ 1 1))]\n                            (println \&quot;HA\&quot;)))&quot; &quot;(realized? (.result x))&quot; &quot;(r/failed? @(.result x))&quot; &quot;@(.result x)&quot; &quot;(when-success [_ x]\n              (println \&quot;HA\&quot;))&quot; &quot;(when-success [_ x] (println \&quot;HA\&quot;))&quot; &quot;(when [_ (1 &lt; 2)] (println \&quot;HA\&quot;))&quot; &quot;(when (1 &lt; 2) (println \&quot;HA\&quot;))&quot; &quot;(when [a (1 &lt; 2)] (println \&quot;HA\&quot;))&quot; &quot;(when (1 &gt; 2)\n  (println \&quot;HA\&quot;))&quot; &quot;(when (&lt; 1 2) (println \&quot;HA\&quot;))&quot; &quot;(when-success (task (+ 1 1))\n              (println \&quot;HA\&quot;)\n              (println \&quot;NO\&quot;))&quot; &quot;(def x (task 2))&quot; &quot;(.result x)&quot; &quot;(when-success x\n              (println \&quot;HA\&quot;)\n              (println \&quot;HA\&quot;))&quot; &quot; (use 'halfling.task)&quot; &quot;(macroexpand '(when-success x (println \&quot;HA\&quot;) (println \&quot;NO\&quot;)))&quot; &quot;(type x)&quot; &quot;(def x (halfling.task 1))&quot; &quot;(instance? Task x)&quot; &quot;(def x (task 1))&quot; &quot;(macroexpand '(when-success x (println \&quot;HA\&quot;) (println \&quot;HA\&quot;)))&quot; &quot;(when-success x (println \&quot;HA\&quot;) (println \&quot;HA\&quot;))&quot; &quot;(def x (task (+ 1 1)))&quot; &quot;(macroexpand \n  '(do-tasks [a (task (+ 1 1))\n              b (task (+ a 1))\n              c (task (+ b a))]\n             c))&quot; &quot;(do-tasks [a (task (+ 1 1))\n           b (task (+ a 1))]\n          (task (+ a b)))&quot; &quot;(macroexpand '(do-tasks [a (task (+ 1 1))\n                         b (task (+ a 1))]\n                        (task (+ a b))))&quot; &quot;(def x (task (throw (new IllegalArgumentException \&quot;HA\&quot;))))&quot; &quot;x&quot; &quot;(deref-task x)&quot; &quot;(macroexpand '(task (+ 1 1) (+ 2 2)))&quot; &quot;(def x (do-tasks [a (task (+ 1 1))\n                  b (task (+ a 1))]\n                 (task (+ a b))))&quot; &quot;(def fut (run-task x))&quot; &quot;(println x)&quot; &quot;(completed? x)&quot; &quot;(executed? x )&quot; &quot;(completed? fut)&quot; &quot;(executed? fut)&quot; &quot;(deref-task fut)&quot; &quot;(def res (deref-task zipped))&quot; &quot;res&quot; &quot;(zipWith a str)&quot; &quot;(def res (zipWith a str))&quot; &quot;(ap (fn [a b c] (+ a b c)) a b c)&quot; &quot;(def res (ap (fn [a b c] (+ a b c)) a b c))&quot; &quot;(def res (ap (fn [x y z] (+ x y z)) a b c))&quot; &quot;(deref-task res)&quot; &quot;(zip a b c)&quot; &quot;c&quot; &quot;(.result a)&quot; &quot;(.result b)&quot; &quot;(.result c)&quot; &quot;(deref-task b)&quot; &quot;(deref-task c)&quot; &quot;(deref-task (zipped a b c))&quot; &quot;(deref-task (zip a b c))&quot; &quot;(.result zipped)&quot; &quot;(use 'halfling.task)&quot; &quot;(def a (task 1))&quot; &quot;(def b (task 2))&quot; &quot;(def c (task 3))&quot; &quot;(= (type zipped) 'Task)&quot; &quot;(= (type zipped) `Task)&quot; &quot;(= (type zipped) Task)&quot; &quot;(= (type zipped) 'halfling.task.Task)&quot; &quot;(type zipped)&quot; &quot;(isa? zipped Task)&quot; &quot;(instance? Task zipped)&quot; &quot;(instance? Task a)&quot; &quot;(def a (task 1 ))&quot; &quot;(task? a\n       )&quot; &quot;(deref-task a)&quot; &quot;a&quot; &quot;zipped&quot; &quot;(deref-task zipped)&quot; &quot;(task? zipped)&quot; &quot;(type a)&quot; &quot;b&quot; &quot;(task b)&quot; &quot;(def zipped (zip a b c))&quot; &quot;(task? a)&quot; &quot;(task? b)&quot; &quot;(task? c)&quot; &quot;(type b)&quot; &quot;(instance-of Task a)&quot; &quot;(.isInstance Task a)&quot; &quot;(.isInstance Task b)&quot; &quot;(.isInstance Task c)&quot; &quot;(meta b)&quot; &quot;(meta a)&quot; &quot;(class a)&quot; &quot;(class b)&quot;], :remote []}}</component>
</project>